#!/usr/bin/python3

# {{{ CDDL HEADER
#
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
#
# }}}

# Copyright 2021 OmniOS Community Edition (OmniOSce) Association.

import logging, os, subprocess, sys, tempfile, time, re, getopt, ucred
import xml.etree.ElementTree as etree
from pprint import pprint, pformat

testmode = False
zone = None
xmlfile = None

# Default values
opts = {
    'acpi':         'on',
    'bootorder':    'cd',
    'bootrom':      'BHYVE_RELEASE_CSM',
    'console':      '/dev/zconsole',
    'diskif':       'virtio-blk',
    'extra':        None,
    'hostbridge':   'i440fx',
    'netif':        'virtio-net-viona',
    'ram':          '1G',
    'rng':          'off',
    'type':         'generic',
    'uuid':         None,
    'vcpus':        '1',
    'vga':          'off',
    'vnc':          'off',
    'xhci':         None,
}

aliases = {
    'diskif': {
        'virtio':       'virtio-blk',
        'ahci':         'ahci-hd',
    },
    'netif': {
        'virtio':       'virtio-net-viona',
    },
    'hostbridge': {
        # Was wrongly used in some older scripts.
        'intel':        'netapp',
    },
    'vnc': {
        'on':   'unix=/tmp/vm.vnc',
        'wait': 'wait,unix=/tmp/vm.vnc',
    },
    'bootrom': {
        # These old firmware files were present before r151035. Provide aliases
        # for backwards compatibility.
        'BHYVE_DEBUG-2.70':         'BHYVE_DEBUG',
        'BHYVE_DEBUG_CSM-2.40':     'BHYVE_DEBUG_CSM',
        'BHYVE_RELEASE-2.70':       'BHYVE_RELEASE',
        'BHYVE_RELEASE_CSM-2.40':   'BHYVE_RELEASE_CSM',
    }
}

HOSTBRIDGE_SLOT = 0
LPC_SLOT        = 1
CDROM_SLOT      = 3
BOOTDISK_SLOT   = 4
DISK_SLOT       = 5
NET_SLOT        = 6
CDROM_SLOT2     = 7
DISK_SLOT2      = 8
PPT_SLOT        = 9
RNG_SLOT        = 10
VNC_SLOT        = 30
LPC_SLOT_WIN    = 31

##############################################################################

uc = ucred.get(os.getpid())
if not uc.has_priv("Effective", "sys_config"):
    testmode = True

def usage(msg=None):
    print("boot [-t] [-x xml] <[-z] zone>")
    if msg: print(msg)
    sys.exit(2)

try:
    cliopts, args = getopt.getopt(sys.argv[1:], "tx:z:")
except getopt.GetoptError:
    usage()
for opt, arg in cliopts:
    if opt == '-t':
        testmode = True
    elif opt == '-x':
        xmlfile = arg
    elif opt == '-z':
        zone = arg
    else:
        assert False, "unhandled option"

if not zone and len(args):
    zone = args.pop(0)

if len(args):
    usage('Unexpected arguments')

if not zone:
    usage('No zone name supplied')

logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

def fatal(msg):
    logging.error(msg)
    print(msg, file=sys.stderr)
    sys.exit(1)

if not xmlfile:
    xmlfile = f'/etc/zones/{zone}.xml'

if not os.path.isfile(xmlfile):
    fatal(f'Cannot find zone XML file at {xmlfile}')

try:
    cfg = etree.parse(xmlfile)
except:
    fatal(f'Could not parse {xmlfile}')

xmlroot = cfg.getroot()

name = xmlroot.get('name')
zonepath = xmlroot.get('zonepath')
zoneroot = f'{zonepath}/root'

if not testmode and not os.path.isdir(zoneroot):
    fatal(f'Could not find zone root {zoneroot}')

if not testmode:
    logging.basicConfig(filename=f'{zonepath}/log/zone.log', filemode='a',
        level=logging.DEBUG, force=True)

logging.info(f'Zone name: {name}')

##############################################################################

def parseopt(tag):
    global opts, xmlroot
    try:
        el = xmlroot.find('./attr[@name="{0}"]'.format(tag))
        opts[tag] = el.get('value').strip()
        logging.debug('Found custom {0} attribute - "{1}"'
            .format(tag, opts[tag]))
        if tag in aliases:
            try:
                opts[tag] = aliases[tag][opts[tag]]
                logging.debug('  expanded to {0}'.format(opts[tag]))
            except KeyError:
                pass
    except:
        pass

def writecfg(fh, arg):
    if testmode:
        print(arg)
    else:
        fh.write(f'{arg}\n')

def diskpath(arg):
    if arg.startswith('/dev'):
        return arg
    return '/dev/zvol/rdsk/{0}'.format(arg)

# Look for attributes of the form <type> or <type>N and generate a list.
def build_devlist(type, maxval):
    devlist = {}
    for dev in xmlroot.findall('./attr[@name]'):
        m = re.search(rf'^{type}(\d+)$', dev.get('name').strip())
        if not m: continue
        k = int(m.group(1))
        if k in devlist:
            logging.error(
                '{}{} appears more than once in configuration'.format(type, k))
            sys.exit(1)
        if (k > maxval):
            logging.error('{}{} slot out of range'.format(type, k))
            sys.exit(1)
        devlist[k] = dev.get('value').strip()

    # Now insert plain <type> tags into the list, using available slots in order
    avail = sorted(set(range(0, maxval)).difference(sorted(devlist.keys())))
    for dev in xmlroot.findall(f'./attr[@name="{type}"]'):
        try:
            k = avail.pop(0)
        except IndexError:
            logging.error('{}: no more available slots'.format(type))
            sys.exit(1)
        devlist[k] = dev.get('value').strip()

    logging.debug('{} list: \n{}'.format(type, pformat(devlist)))

    return devlist

##############################################################################

for tag in opts.keys():
    parseopt(tag)

if opts['type'] == 'windows':
    # See https://wiki.freebsd.org/bhyve/Windows
    # ... There are currently some slot limitations with UEFI:
    # ... - AHCI devices must be in slots 3/4/5/6
    # ... - The PCI-ISA bus aka lpc must be in slot 31
    logging.info('Adjusting LPC PCI slot for windows')
    LPC_SLOT = LPC_SLOT_WIN

# At present, moving the CDROM to after the hard disks is the only way we
# have of changing the boot order. This will hopefully improve in the
# future once we get persistent bootrom variables.
if opts['bootorder'].startswith('c') and opts['type'] != 'windows':
    CDROM_SLOT = CDROM_SLOT2

# Bootrom
bootrom = opts['bootrom']
if bootrom.find('/') == -1:
    bootrom = f'/usr/share/bhyve/firmware/{bootrom}'
if not bootrom.endswith('.fd'):
    bootrom += '.fd'
if not os.path.isfile(bootrom):
    fatal(f'bootrom {opts["bootrom"]} not found.')
logging.debug(f'Final bootrom: {bootrom}')

# UUID
uuid = opts['uuid']
if not uuid:
    try:
        with open(f'{zoneroot}/etc/uuid') as file:
            uuid = file.read().strip()
            logging.info('Zone UUID: {0}'.format(uuid))
    except:
        uuid = None
logging.debug(f'Final uuid: {uuid}')

##############################################################################

args = ['/usr/sbin/bhyve']

if opts['type'] == 'openbsd':
    logging.info('Ignoring unknown MSRs for OpenBSD')
    args.append('-w')

if uuid:
    args.extend(['-U', uuid])

# The ACPI option has no effect with illumos bhyve
#if opts['acpi'] == 'on':
#    args.append('-A')

args.extend([
    '-H',
    '-B', '1,manufacturer={},product={},version={},serial={},sku={},family={}'
        .format('OmniOS', 'OmniOS HVM', '1.0', uuid, '001', 'Virtual Machine'),
    '-c', opts['vcpus'],
    '-m', opts['ram'],
])

# Bootrom

args.extend(['-l', 'bootrom,{0}'.format(bootrom)])

# Host bridge

if not opts['hostbridge'] or opts['hostbridge'] == 'none':
    pass
elif '=' in opts['hostbridge']:
    args.extend(['-s', '{0},hostbridge,{1}'.format(
        HOSTBRIDGE_SLOT, opts['hostbridge'])])
else:
    args.extend(['-s', '{0},hostbridge,model={1}'.format(
        HOSTBRIDGE_SLOT, opts['hostbridge'])])

# LPC

args.extend(['-s', '{0},lpc'.format(LPC_SLOT)])

# Console

args.extend(['-l', 'com1,{0}'.format(opts['console'])])

# CDROM

for i, v in build_devlist('cdrom', 10).items():
    args.extend([
        '-s', '{0}:{1},{2},{3},ro'.format(CDROM_SLOT, i, 'ahci-cd', v)
    ])

# Bootdisk

try:
    bootdisk = xmlroot.find('./attr[@name="bootdisk"]')
    args.extend([
        '-s', '{0}:0,{1},{2}'.format(BOOTDISK_SLOT, opts['diskif'],
            diskpath(bootdisk.get('value').strip()))
    ])
except:
    pass

# Additional Disks

for i, v in build_devlist('disk', 20).items():
    if i < 10:
        args.extend([
            '-s', '{0}:{1},{2},{3}'.format(DISK_SLOT, i, opts['diskif'],
            diskpath(v))
        ])
    else:
        args.extend([
            '-s', '{0}:{1},{2},{3}'.format(DISK_SLOT2, i - 10, opts['diskif'],
            diskpath(v))
        ])

# Network

i = 0
for f in xmlroot.findall('./network[@physical]'):
    ifname = f.get('physical').strip()
    mask = f.find("./net-attr[@name='feature_mask']")
    netif = f.find("./net-attr[@name='netif']")

    net_extra = ''
    netif = netif.get('value') if netif is not None else opts['netif']

    if mask:
        net_extra += ',feature_mask={}'.format(mask.get('value'))

    args.extend([
        '-s', '{0}:{1},{2},{3}{4}'
        .format(NET_SLOT, i, netif, ifname, net_extra)
    ])
    i += 1

# VNC

if opts['vnc'] and opts['vnc'] != 'off':
    args.extend(['-s', '{0}:0,fbuf,vga={1},{2}'.format(
        VNC_SLOT, opts['vga'], opts['vnc'])])
    if not opts['xhci'] or opts['xhci'] != 'off':
        args.extend(['-s', '{0}:1,xhci,tablet'.format(VNC_SLOT)])

# Pass-through devices

ppt = 0
for dev in xmlroot.findall('./attr[@name]'):
    m = re.search(r'^ppt(\d+)$', dev.get('name').strip())
    if not m: continue
    if dev.get('value').strip() != 'on': continue
    k = int(m.group(1))
    if ppt == 0:
        args.append('-S')
    args.extend(['-s', '{0}:{1},passthru,/dev/ppt{1}'.format(
        PPT_SLOT, k)])
    ppt += 1

# RNG

if opts['rng'] == 'on':
    args.extend(['-s', '{0}:0,virtio-rnd'.format(RNG_SLOT)])

# Extra options

if opts['extra']:
    args.extend(opts['extra'].split(' '))

# Dump configuration

args.extend(['-o', 'config.dump=1'])

# VM name

args.append(name)

##############################################################################

logging.debug('Final arguments: {0}'.format(pformat(args)))
logging.info('{0}'.format(' '.join(map(
    lambda s: f'"{s}"' if ' ' in s else s, args))))

p = subprocess.run(args, capture_output=True, text=True)
# config.dump exits with a status code of 1. Other errors indicate a problem.
if p.returncode != 1:
    fatal(f'Could not parse configuration: {p.stderr}')

fh = None
if not testmode:
    try:
        fh = tempfile.NamedTemporaryFile(mode='w', dir=f'{zoneroot}/etc',
            prefix='bhyve.', delete=False)
    except Exception as e:
        fatal(f'Could not create temporary file: {e}')
    else:
        logging.debug(f'Created temporary file at {fh.name}')

writecfg(fh, '#\n# Generated from zone configuration\n#')

for line in p.stdout.splitlines():
    if line.startswith('config.dump'): continue
    writecfg(fh, line)

if not testmode:
    tf = fh.name
    fh.close()
    try:
        os.rename(tf, f'{zoneroot}/etc/bhyve.cfg')
    except Exception as e:
        fatal(f'Could not create bhyve.cfg from temporary file: {e}')
    else:
        logging.info(f'Successfully created {zoneroot}/etc/bhyve.cfg')

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
